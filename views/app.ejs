<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>To-do-List</title>
  <link rel="icon" type="image/png" href= "image/checklist.png">
  <style>
    *{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
}
.container{
    width: 100%;
    min-height: 100vh;
    background: linear-gradient(135deg, #153677, #45085f);
    padding: 10px;
}
.to-do-app{
    width: 100%;
    max-width: 540px;
    background: #fff;
    margin: 100px auto 20px;
    padding: 40px 30px;
    border-radius: 10px;
}
.to-do-app h2{
    color: #002765;
    display: flex;
    align-items: center;
    margin-bottom: 20px;
}
.to-do-app h2 img{
    width: 30px;
    margin-left: 10px;
}
.row{
    display: flex;
    align-items: center;
    justify-content: space-between;
    background: #edeef0;
    border-radius: 30px;
    margin-bottom: 25px;
}
input{
    flex: 1;
    border: none;
    outline: none;
    background: transparent;
    padding: 10px;
    font-weight: 14px;
}
button{
    border: none;
    outline: none;
    padding: 16px 50px;
    background: #ff5945;
    color: #fff;
    font-size: 16px;
    cursor: pointer;
    border-radius: 40px;
}
ul li{
    list-style: none;
    font-size: 17px;
    padding: 12px 8px 12px 50px;
    user-select: none;
    cursor: pointer;
    position: relative;
}
ul li::before{
    content: '';
    position: absolute;
    height: 28px;
    width: 28px;
    border-radius: 50%;
    background-image: url(image/unchecked.png);
    background-size: cover;
    background-position: center;
    top: 12px;
    left: 8px;
}
ul li.checked{
    color: #555;
    text-decoration: line-through;
}
ul li.checked::before{
    background-image: url(image/checked.png);
}
ul li remove{
    position: absolute;
    right: 0;
    top: 5px;
    width: 40px;
    height: 40px;
    font-size: 25px;
    color: #555;
    line-height: 40px;
    text-align: center;
    border-radius: 50%;
}
ul li remove:hover{
    color: red;
}
ul li edit{
    position: absolute;
    right: 30px;
    top: 5px;
    width: 40px;
    height: 40px;
    height: 40px;
    font-size: 22px;
    color: #555;
    line-height: 40px;
    text-align: center;
    border-radius: 50%;
}
ul li edit:hover{
    color: blue;
}
ul li content.must-done{
    color: #ff5945;
}
  </style>
</head>
<body>
  <div class = "container">
    <div class = "to-do-app">
      <h2>To-Do List <img src="image/icon.png"></h2>
      <div class = "row">
        <input type="text" id = "title" placeholder = "Add a new task">
        <input type="text" id = "description" placeholder = "Add a description">
        <button id = "addBtn">Add</button>
      </div>
      <ul id = "list-container">
        <!-- <li class = "checked" >Task 1</li>
        <li>Task 2</li>
        <li>Task 3</li> -->
      </ul>
    </div>
  </div>
  <script>
    const inputTitle = document.getElementById("title");
    const inputDescription = document.getElementById("description");
    const listNotes = document.getElementById("list-container");
    const addBtn = document.getElementById("addBtn");
    const baseUrl = "http://localhost:3000/list/";

    window.addEventListener("load", getData);
    addBtn.addEventListener("click", postData);
    addBtn.addEventListener("click", getData);	

    async function postData() {
	    if (inputTitle.value === ''){
		    alert("Please enter a task");
	    }
	    const res = await fetch(baseUrl,{
		      method: "POST",
		      headers: {
			      "Authorization": "Bearer " + req.cookies.token
		      },
		      body: JSON.stringify({
			    title: inputTitle.value,
			    description: inputDescription.value,
			    status: false
		    })
	    });
	    inputTitle.value = "";
	    inputDescription.value = "";
    }

    async function getData() {
	  listNotes.innerHTML = "";
	  const res = await fetch(baseUrl + 'all', {
	    method: "GET",
      headers: {
        "Authorization": "Bearer " + req.cookies.token
      },
	  });
	  const data = await res.json();
	
	  data.forEach((note) => {
		const li = document.createElement("li");

		const content = document.createElement("content");
		if (note.description == undefined) {
			note.description = "";
		}
		if (note.description == "must done") {
			content.classList.add("must-done");
		}
		if (note.status == true){
			li.classList.add("checked");
		}
		content.innerText = note.title + '\n' + note.description;
		content.contentEditable = false;
		
		const span = document.createElement("SPAN");
		
		const remove = document.createElement("remove");
		remove.innerHTML = "\u00D7";

		const edit = document.createElement("edit");
		edit.innerHTML = "\u270E";
		
		span.appendChild(edit);
		span.appendChild(remove);
		
		li.appendChild(content);
		li.appendChild(span);
		listNotes.appendChild(li);
		
		edit.addEventListener("click", (e) => {
			if (edit.innerHTML == "\u270E") {
				edit.innerHTML = "\u2713";
				content.contentEditable = true;
			}
			else {
				note.title = content.innerText.split('\n')[0];
				note.description = content.innerText.split('\n')[1];
				updateData(note._id, note.title, note.description, note.status);
				edit.innerHTML = "\u270E";
				content.contentEditable = false;
			}
		});

		remove.addEventListener("click", (e) => {
			e.target.parentElement.parentElement.remove();
			deleteData(note._id);
		});

		li.addEventListener("click", (e) => {
			e.target.classList.toggle("checked");
			if (e.target.classList.contains("checked")) {
				note.status = true;
			}
			else {
				note.status = false;
			}
			updateData(note._id, note.title, note.description, note.status);
		});
	});
  }

async function deleteData(id) {
	const res = await fetch(baseUrl + id, {
		method: "DELETE",
    headers: {
      "Authorization": "Bearer " + req.cookies.token
    }
	});
}

async function updateData(id, title, description, status) {
	const res = await fetch(baseUrl + id, {
		method: "PUT",
		headers: {
			"Authorization": "Bearer " + req.cookies.token
		},
		body: JSON.stringify({
			title: title,
			description: description,
			status: status
		})
	});
}
  </script>
</body>
</html>